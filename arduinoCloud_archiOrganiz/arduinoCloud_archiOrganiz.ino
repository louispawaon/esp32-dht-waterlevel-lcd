
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/32c410d5-bf65-4cd1-8662-ada49ea47cbc

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  String sensor_Choice;
  CloudTemperatureSensor temperature;
  int water_Level;
  CloudRelativeHumidity humidity;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <DHT.h>

const int I2C_ADDR = 0x27;
const int LCD_COLS = 16;
const int LCD_ROWS = 2;

LiquidCrystal_I2C lcd(I2C_ADDR, LCD_COLS, LCD_ROWS);

#define DHTPIN 13
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

const int waterLevelPin = 36;

bool showHumidity = false;
bool showTemperature = false;
bool showWaterLevel = false;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);

  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(2000);

  lcd.init();
  lcd.backlight();

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
    The following function allows you to obtain more information
    related to the state of network and IoT Cloud connection and errors
    the higher number the more granular information youâ€™ll get.
    The default is 0 (only errors).
    Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  dht.begin();
  delay(2000);
}

void loop() {
  ArduinoCloud.update();
  // Your code here
  readSensors();
  updateLCD();

  delay(2000);
}

// Custom Functions
void readSensors() {
  // Read sensor data here
  humidity = dht.readHumidity();
  temperature = dht.readTemperature();
  // Replace with your water level sensor reading logic
  water_Level = analogRead(waterLevelPin); // Example using an analog sensor
}

void updateLCD() {
  lcd.clear();
  if (showTemperature) {
    lcd.setCursor(0, 0);
    lcd.print("Temperature:");
    lcd.setCursor(0, 1);
    lcd.print(temperature);
    lcd.print(" C");
  }
  if (showHumidity) {
    lcd.setCursor(0, 0);
    lcd.print("Humidity:");
    lcd.setCursor(0, 1);
    lcd.print(humidity);
    lcd.print(" %");
  }
  if (showWaterLevel) {
    lcd.setCursor(0, 0);
    lcd.print("Water Level:");
    lcd.setCursor(0, 1);
    lcd.print(water_Level);
  }
}

/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}

/*
  Since WaterLevel is READ_WRITE variable, onWaterLevelChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onWaterLevelChange()  {
  // Add your code here to act upon WaterLevel change
}

/*
  Since SensorChoice is READ_WRITE variable, onSensorChoiceChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSensorChoiceChange()  {
  // Add your code here to act upon SensorChoice change
  // Update global variables to indicate which sensor to show
  if (sensor_Choice == "temperature") {
    showTemperature = true;
    showHumidity = false;
    showWaterLevel = false;
  } else if (sensor_Choice == "humidity") {
    showTemperature = false;
    showHumidity = true;
    showWaterLevel = false;
  } else if (sensor_Choice == "waterLevel") {
    showTemperature = false;
    showHumidity = false;
    showWaterLevel = true;
  } else {
    // Handle unexpected selection (optional)
    Serial.println("Invalid sensor selection!");
  }
}